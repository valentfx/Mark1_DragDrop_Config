/******************************************************************************
From device to device, the I2C communication protocol may vary,
in the example below, the protocol uses repeated start to read data from or
write to the device:
For master read: the sequence is: STA,Addr(W),offset,RE-STA,Addr(r),data...STO
for master write: the sequence is: STA,Addr(W),offset,RE-STA,Addr(w),data...STO
Thus, in state 8, the address is always WRITE. in state 10, the address could
be READ or WRITE depending on the I2C command.
********************************************************************************
LOGi FAMILY USAGE:
DESCRIPOTION: I2C will receive commands that can be processed the change the operation of hte LPC Chip.
Packets: 	[1byte]  	[1byte]		[1byte]
packet	: 	[cmd1] 		[data1]		 [data2]	.... [data7] = 8 bytes total packet

The commands can be processed directly in the interrupt if very short time is needed.
or a task flag can be set to process other more latent tasks such as fpga config initiate.
1) To add a command, add a #define and invrement the command number.
2) check for the command in the switch statement in the i2c irq.  the command can be direclty
	processed (if very quick), or set a task that be processed in order not to block the irq or program.
3) If needed add a task define, set the defined task to be processed in "I2C_process_task"
*********************************************************************************/


#include "System.h"
#include "LPC13xx.h"
#include "type.h"
#include "i2cslave.h"

//I2C EXTERNAL STATUS FLAGS
//I2C TASKS flags that need to occur outside of interrupt

volatile uint8_t i2c_cmd_rx = 0;
static volatile uint8_t i2c_task = 0;

volatile int8_t i2c_slave_cfg_init_status = 0;	//holds the values of the fpga bitstream config sequence response

//I2C TASKS THAT MIGHT NEED TO BE DONE
#define	I2C_TASK_LPC_MODE		0X01
#define	I2C_TASK_PASSIVE_MODE	0X02
#define	I2C_TASK_LPC_CFG		0X03
#define	I2C_TASK_SLAVE_CFG_INIT				0X05	//initialize the fpga bitstream config sequence
#define	I2C_TASK_SLAVE_CFG_INIT_STAT		0X06	//status of the fpga bitstrea config sequence

//THESE ARE THE CMD VALUES THAT ARE SENT FROM THE MASTER DEVICE 0-256.
#define I2C_CMD1_PASSIVE_MODE 	0X01	//command to go into passive mode
#define I2C_CMD1_LPC_CFG_MODE 	0X02	//command to go have LPC configure the fpga
#define I2C_CMD1_DONE 			0X03	//did the done bit go high?
#define I2C_CMD1_LPC_CFG 		0X04	//reconfigure the fpga
#define I2C_CMD1_SLAVE_CFG_INIT 		0X05	//reconfigure the fpga
#define I2C_CMD1_SLAVE_CFG_INIT_STAT 		0X06	//reconfigure the fpga


//I2C INTERRUPT STATE MACHINE VAR
volatile uint32_t I2CSlaveState = I2C_IDLE;	//interrupt state varialbe
//I2C READ/WR BUFFERS
volatile uint8_t I2CWrBuffer[I2C_WR_BUF_SIZE];	//data to write to i2c bus
volatile uint8_t I2CRdBuffer[I2C_RD_BUF_SIZE];	//data read from i2c bus
//volatile uint32_t I2CSlaveState;					//state machine for i2c slave interrupt
volatile uint32_t I2CReadLength, I2CWriteLength;	//lengh of the read write buffers
//INDEX VALUES FOR THE READ/WR BUFFERS
volatile uint8_t RdIndex = 0;
volatile uint8_t WrIndex = 0;


/* *****************************************************************************************
* DESCRIPTION: Process commands I2C commands that are not processed in the interrupt.
* 		- Slow porcessing commands will be processed here so that the interrupt will not block communications

******************************************************************************************/
void I2C_process_task( void)
{


	//PROCESS I2C PENDING TASK - CURRENTLY ONLY ONE AT A TIME - NO STACK NEEDED AT THIS POINT
	switch( i2c_task)
	{
		case  STATE_SYS_STARTUP:

	}
	if(i2c_task==I2C_TASK_LPC_MODE){	//received command from i2c go into default lpc mode
		//set pins to default lpc mode
		InitGPIO_LPC_Mode();
		LED0_TOGGLE;
		i2c_cmd_rx = 0;		//done processing the command
	}
	//if(i2c_passive_mode){	//received command from i2c go into passive mode
	if(i2c_task==I2C_TASK_PASSIVE_MODE){	//received command from i2c go into passive mode
		//set pins to default lpc mode
		InitGPIO_Passive_Mode();
		LED1_TOGGLE;
		i2c_cmd_rx = 0;		//done processing the command
	}
	//if(i2c_lpc_configure){	//received command from i2c to reconfigure
	if(i2c_task==I2C_TASK_LPC_CFG){	//received command from i2c to reconfigure
		InitGPIO_LPC_Mode();	//make sure we are not setup for passive
		FPGA_Config("config.bit");
		i2c_cmd_rx = 0;		//done processing the command
	}
	if(i2c_task==I2C_TASK_SLAVE_CFG_INIT){	//received command from i2c to reconfigure
		i2c_slave_cfg_init_status = -1;		//reset the return status
		i2c_slave_cfg_init_status = InitFPGA_Config();
		//need to setup the mux pin to give control to the master device for cclk, datain pins.
		//InitGPIO_Passive_Mode();	//puts the LPC into passive mode, ie HiZ sahred pins,  set mux for master access to cclk, datain
		CFG_MUX_MASTER_CTL;
		i2c_cmd_rx = 0;		//done processing the command
	}

}//function




/**********************************************************************************
//  Table 237. Slave Receiver mode, SEE PAGE 236
//STATUS REGISTER BIT VALUES
//Bit 		7 		6 		5 		4 		3 		2 	1 	0
//Symbol 	- 		I2EN 	STA 	STO 	SI 		AA 	- 	-
//Value 	- 		1 		0 		0 		0 		1 	- 	-
***********************************************************************************
	//STATES USED IN THE STATE MACHINE
	case 0x60:								// Own SLA+W has been received; ACK has been returned.
	case 0x68: 0B 0110 1000					// Arbitration lost in SLA+R/W as master; Own SLA+W has been received, ACK returned.
	case 0x80: 1000 0000					// data receive
	case 0x90: 1001 0000


	case 0xA8: 1010 1000					// An own SLA_R has been received.  	//slave Read
	case 0xB0: 1011 0000

	case 0xB8: 1011 1000					// Data byte has been transmitted
	case 0xC8: 1100 1000

	case 0xC0: 1100 1000				  // Data byte has been transmitted, NACK
	case 0xA0: 1010 0000
/*****************************************************************************
** Function name:		I2C_IRQHandler
*****************************************************************************/
volatile uint8_t rec = 0, temp1=0;
void I2C_IRQHandler(void) 
{
  uint8_t StatValue;

  StatValue = LPC_I2C->STAT;
  switch ( StatValue )
  {
  //Bit 		7 	6 		5 		4 		3 		2 	1 	0
  //Symbol 		- 	I2EN 	STA 	STO 	SI 		AA 	- 	-
	case 0x60:							// An own SLA_W has been received. - ADDRESS WAS DETECTED
	case 0x68:		//START RECEIVED
		RdIndex = 0;	//restarte the read index
		LPC_I2C->CONSET = I2CONSET_AA;	// assert ACK after SLV_W is received
		LPC_I2C->CONCLR = I2CONCLR_SIC;	//clear the interrupt flag
		I2CSlaveState = I2C_WR_STARTED;
	break;
	
	//WRITE ALREADY STARTED - STORE THE DATA
	case 0x80:							// data receive
	case 0x90:
		if ( I2CSlaveState == I2C_WR_STARTED )
		{
			LPC_I2C->CONSET = I2CONSET_AA;	// assert ACK after data is received
			I2CRdBuffer[RdIndex++] = LPC_I2C->DAT;
		}//if
		else
		{
			LPC_I2C->CONCLR = I2CONCLR_AAC;	// assert NACK
		}
		LPC_I2C->CONCLR = I2CONCLR_SIC;
	break;
		
	//READ COMMAND RECEIVED
	case 0xA8:								// An own SLA_R has been received.  	//slave Read
	case 0xB0:
		RdIndex = 0;
		LPC_I2C->CONSET = I2CONSET_AA;		// assert ACK after SLV_R is received
		LPC_I2C->CONCLR = I2CONCLR_SIC;
		I2CSlaveState = I2C_RD_STARTED;
		WrIndex = 0;//I2CRdBuffer[0];		//The 1st byte is the index. //restart the write index
	break;
	
					//SEND CONSECUTIVE DATA OUT ON I2C PORT
	case 0xB8:		// Data byte has been transmitted
	case 0xC8:
		if ( I2CSlaveState == I2C_RD_STARTED )
		{
		  LPC_I2C->DAT = I2CWrBuffer[WrIndex++];	// write the same data back to master
		  LPC_I2C->CONSET = I2CONSET_AA;			// assert ACK
		}
		else
		{
		  LPC_I2C->CONCLR = I2CONCLR_AAC;		// assert NACK
		}
		LPC_I2C->CONCLR = I2CONCLR_SIC;
	break;

	//NACK WAS RECEIVED - ALL DATA WAS SENT
	case 0xC0:									// Data byte has been transmitted, NACK
		LPC_I2C->CONCLR = I2CONCLR_AAC;			// assert NACK - or nack was received??
		LPC_I2C->CONCLR = I2CONCLR_SIC;
		//I2CSlaveState = DATA_NACK;			//demo used this
		LPC_I2C->CONSET = I2CONSET_AA; 			//THIS IS NEEDED
		I2CSlaveState = I2C_IDLE;				//restart state machine
		//LED1_TOGGLE;
		//i2c_nack_rx = 1;	//debug -  set flag that nack was received
		WrIndex = 0;
	break;

	//STOP CONDITION - PROCESS THE RECEIVED DATA
	case 0xA0:							// Stop condition or repeated start has
		LPC_I2C->CONSET = I2CONSET_AA;	// been received, assert ACK.
		LPC_I2C->CONCLR = I2CONCLR_SIC;
		I2CSlaveState = I2C_IDLE;
		//LED0_TOGGLE;
		//i2c_cmd_rx = 1;		// dont need anymore i2c command rx flag
		//PROCESS THE RECEIVED COMMANDS HERE
		rec = I2CRdBuffer[0];	//what is the first value received (command)
		switch (rec){
			case I2C_CMD1_PASSIVE_MODE:
				//PUT DEVICE INTO PASSIVE MODE
				i2c_cmd_rx = 1;
				i2c_task = I2C_TASK_PASSIVE_MODE;
				LED0_TOGGLE;
				break;
			case I2C_CMD1_LPC_CFG_MODE:
				//PUT DEVICE INTO LPC CFG MODE
				i2c_cmd_rx = 1;
				i2c_task = I2C_TASK_LPC_MODE;
				//LED1_TOGGLE;
				break;
			case I2C_CMD1_DONE:
				//send the status of done pin.
				//I2CWrBuffer[0] = 0xAA;	//debug - send something recognizable
				I2CWrBuffer[0] = CFG_DONE_STATE;	//return the value of the done pin state
				LED0_TOGGLE;
				LED1_TOGGLE;
				break;
			case I2C_CMD1_LPC_CFG:
				//LED0_TOGGLE;
				//LED1_TOGGLE;
				i2c_cmd_rx = 1;
				i2c_task = I2C_TASK_LPC_CFG;
				break;
			case I2C_CMD1_SLAVE_CFG_INIT:
				//LED0_TOGGLE;
				//LED1_TOGGLE;
				i2c_cmd_rx = 1;
				i2c_task = I2C_TASK_SLAVE_CFG_INIT;
				break;
			case I2C_CMD1_SLAVE_CFG_INIT_STAT:
				//LED0_TOGGLE;
				//LED1_TOGGLE;
				I2CWrBuffer[0] = i2c_slave_cfg_init_status;		//did initb go high?
				break;
			default:
				break;
		}//switch
		//reset to receive data
		RdIndex = 0;
	break;

	default:
		LPC_I2C->CONCLR = I2CONCLR_SIC;
		LPC_I2C->CONSET = I2CONSET_I2EN | I2CONSET_SI;
	break;
  }
  return;
}

/*****************************************************************************
** Function name:		I2CSlaveInit
**
** Descriptions:		Initialize I2C controller
**
** parameters:			I2c mode is either MASTER or SLAVE
** Returned value:		true or false, return false if the I2C
**				interrupt handler was not installed correctly
** 
*****************************************************************************/
void I2CSlaveInit( void ) 
{
  /* It seems to be bit0 is for I2C, different from
  UM. To be retested along with SSP reset. SSP and I2C
  reset are overlapped, a known bug, for now, both SSP 
  and I2C use bit 0 for reset enable. Once the problem
  is fixed, change to "#if 1". */

#if 1
  LPC_SYSCON->PRESETCTRL |= (0x1<<1);	//This de-asserts the reset signal to the I2C block
#else
  LPC_SYSCON->PRESETCTRL |= (0x1<<0);
#endif
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<5);
  LPC_IOCON->PIO0_4 &= ~0x3F;		//  I2C I/O config 	//this lines seems unnecessary.  bits7:3 are reserved.?  But read C= 1100
  LPC_IOCON->PIO0_4 |= 0x01;		// I2C SCL
  LPC_IOCON->PIO0_5 &= ~0x3F;	
  LPC_IOCON->PIO0_5 |= 0x01;		// I2C SDA

  //--- Clear flags ---
  LPC_I2C->CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    

  //--- Reset registers ---
#if FAST_MODE_PLUS
  LPC_IOCON->PIO0_4 |= (0x1<<9);
  LPC_IOCON->PIO0_5 |= (0x1<<9);
  LPC_I2C->SCLL   = I2SCLL_HS_SCLL;
  LPC_I2C->SCLH   = I2SCLH_HS_SCLH;
#else
  LPC_I2C->SCLL   = I2SCLL_SCLL;
  LPC_I2C->SCLH   = I2SCLH_SCLH;
#endif

  //LPC_I2C->ADR0 = PCF8594_ADDR;
  LPC_I2C->ADR0 = I2C_SLAVE_ADDR<<1;	//upper 7 bits are the address, low bit is control
  I2CSlaveState = I2C_IDLE;
  
  // Enable the I2C Interrupt
  NVIC_EnableIRQ(I2C_IRQn);

  LPC_I2C->CONSET = I2CONSET_I2EN | I2CONSET_SI;
  return;
}//i2c slave init


// init i2c test buffer **************************************************
void Init_i2c_buf( void){
 uint8_t i = 0;

	  for ( i = 0; i < I2C_RD_BUF_SIZE ; i++ )
	  {
		I2CRdBuffer[i] = 0x00;
		I2CWrBuffer[i] = 0X00;
	  }

	  /*
	  for ( i = 0; i < I2C_WR_BUF_SIZE; i++ )
	  {
		I2CWrBuffer[i] = ;
	  }
	  */
}



/*******************************************************************************
**   Main Function  main()
*******************************************************************************/
/*
int example_main (void)
{
	    uint32_t i;

  for ( i = 0; i < BUFSIZE; i++ )
  {
	I2CRdBuffer[i] = 0x00;
  }

  I2CSlaveInit();

	while ( I2CSlaveState != DATA_NACK );
	LED1_TOGGLE;
	LPC_I2C->CONSET = I2CONSET_AA;
	LPC_I2C->CONCLR = I2CONCLR_SIC;
	I2CSlaveState = I2C_IDLE;
	Init_i2c_buf();


}//example
*/



/******************************************************************************
**                            End Of File
******************************************************************************/





